name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

  build_release:
    name: ${{ matrix.os }}-hosted
    needs: create_release
    env:
      buildDir: '${{ github.workspace }}/build'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          triplet: x64-linux
        - os: windows-latest
          triplet: x64-windows
        - os: macos-latest
          triplet: x64-osx
    steps:
      - name: Checks-out
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup cmake and ninja
        uses: lukka/get-cmake@latest
      - name: Setup dependency
        uses: lukka/run-vcpkg@v6.2
        env:
          vcpkgFile: ${{github.workspace}}/dependencies/vcpkg-${{matrix.triplet}}.txt
        with:
          vcpkgArguments: '@${{ env.vcpkgFile }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          appendedCacheKey: ${{ hashFiles(env.vcpkgFile) }}-cachekey
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
      - name: Build and install
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          useVcpkgToolchainFile: true
          cmakeAppendedArgs: >-
            -G Ninja
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=.
            -DX_VCPKG_APPLOCAL_DEPS_INSTALL=1
          buildDirectory: ${{ env.buildDir }}
          buildWithCMakeArgs: '--target install'
      - name: Run tests
        shell: bash
        run: |
          cd ${GITHUB_WORKSPACE}/build
          ctest -C Debug
      - name: Compress
        uses: montudor/action-zip@v0.1.1
        with:
          args: zip -qq -r Gsx2Jsonpp-${{ matrix.os }}.zip build/bin
      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./Gsx2Jsonpp-${{ matrix.os }}.zip
          asset_name: Gsx2Jsonpp-${{ matrix.os }}.zip
          asset_content_type: application/zip
